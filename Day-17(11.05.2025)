ðŸ”¹ Problem Statement:
Given an array of integers arr, determine whether there are three consecutive odd numbers in the array.
Return true if such a sequence exists, otherwise return false.

ðŸ”¹ Example:
Input: arr = [2, 6, 4, 1, 3, 5]
Output: true
Explanation: The subarray [1, 3, 5] contains three consecutive odd numbers.
ðŸ”¹ Stepwise Approach:
Initialize a variable n to store the size of the array using arr.size().

Loop through the array from index i = 0 to i <= n - 3 (i.e., stop at third-last element to avoid index out of bounds).

At each step, check if three consecutive elements arr[i], arr[i+1], and arr[i+2] are all odd numbers. This is done by:

arr[i] % 2 != 0

arr[i+1] % 2 != 0

arr[i+2] % 2 != 0

If all three are odd, immediately return true.

If the loop finishes without finding any such triplet, return false.

ðŸ”¹ Cleaned Code (with comments):
bool threeConsecutiveOdds(vector<int>& arr) {
    int n = arr.size();
    
    // Traverse up to n - 2 to avoid out-of-bound errors
    for(int i = 0; i < n - 2; i++) {
        // Check if current and next two numbers are all odd
        if(arr[i] % 2 != 0 && arr[i+1] % 2 != 0 && arr[i+2] % 2 != 0) {
            return true;
        }
    }
    return false;
}
