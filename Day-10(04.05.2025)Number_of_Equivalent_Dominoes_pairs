âœ… Problem Statement:
You are given a list of dominoes where each domino is represented as a vector of two integers [a, b]. A pair of dominoes [a, b] and [c, d] are considered equivalent if one domino can be rotated to match the other. That is, they are equivalent if either:s
a == c and b == d, or

a == d and b == c

Return the number of pairs of equivalent dominoes in the list.

ðŸ“Œ Example Input:s
dominoes = [[1,2],[2,1],[3,4],[5,6]]
ðŸ“Œ Example Output:s1
ðŸ‘‰ Only [1,2] and [2,1] are equivalent.

âœ… Code:
int numEquivDominoPairs(vector<vector<int>>& dominoes) {
    unordered_map<int,int> m;
    int count = 0;
    for(auto &x:dominoes)
    {
        int a = min(x[0], x[1]);
        int b = max(x[0], x[1]);
        int key = a * 10 + b;
        count += m[key];
        m[key]++;
    }
    return count;
}
âœ… Stepwise Approach:
Initialize a Hash Map and Count:
unordered_map<int,int> m;
int count = 0;
This map m will store the frequency of each domino represented in a normalized form (smaller number first).

count will keep track of the number of equivalent pairs found so far.
Loop through each domino:
for(auto &x : dominoes)
Each domino x is a vector of two elements.
Normalize the Domino:
int a = min(x[0], x[1]);
int b = max(x[0], x[1]);
int key = a * 10 + b;
Normalize the domino by always making the smaller number come first (to account for rotation).

Generate a unique key for each domino by using a*10 + b (since each number is between 1 and 9, this works safely).

Count Equivalent Pairs So Far:
count += m[key];
If the same normalized domino has been seen m[key] times, then it can form m[key] new pairs with previous occurrences.
Update the Frequency Map:
m[key]++;
Increment the frequency of this normalized domino in the map.
Return the Total Count of Equivalent Pairs:
return count;
âœ… Time and Space Complexity:
Time Complexity: O(n), where n is the number of dominoes.

Space Complexity: O(1), since the number of unique keys is at most 100 (9*10 + 9 max).



class Solution {
public:
    int numEquivDominoPairs(vector<vector<int>>& dominoes) {
        unordered_map<int,int>m;
        int count=0;
        for(auto &x:dominoes)
        {
            int a=min(x[0],x[1]);
            int b=max(x[0],x[1]);
            int key=a*10+b;
            count+=m[key];
            m[key]++;
        }
        return count;
    }
};
