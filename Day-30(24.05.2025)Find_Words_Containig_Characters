Problem Statement:
Given a list of strings words and a character x, return the indices of all strings in words that contain the character x. The indices should be returned in the order they appear in the original list.

Stepwise Approach:
Initialize an empty result vector to store the indices of words containing x.

Iterate through each word in the input list words:

For each word, check if the character x is present using the find method.

If x is found (find does not return string::npos), store the current index in the result vector.

Return the result vector containing all the indices where x was found.

Complexity Analysis:
Time Complexity:

Let n be the number of words in the list, and m be the average length of each word.

The find operation has a time complexity of O(m) in the worst case (scanning the entire word).

Since we perform find for each of the n words, the total time complexity is O(n × m).

Space Complexity:

The space required for the output vector is O(k), where k is the number of words containing x (worst case: O(n) if all words contain x).

No additional space is used, so the total space complexity is O(n) (for the output).

Final Code with Explanation:
cpp
#include <vector>
#include <string>

using namespace std;

vector<int> findWordsContaining(vector<string>& words, char x) {
    vector<int> ans; // Step 1: Initialize result vector
    
    // Step 2: Iterate through each word
    for (int i = 0; i < words.size(); i++) {
        // Check if 'x' is present in the current word
        if (words[i].find(x) != string::npos) {
            ans.push_back(i); // Store index if found
        }
    }
    
    return ans; // Step 3: Return the result
}
Example:
Input:
words = ["leet", "code", "abc", "xerox"], x = 'e'
Output: [0, 1, 3]
Explanation:

"leet" contains 'e' → index 0

"code" contains 'e' → index 1

"xerox" contains 'e' → index 3
