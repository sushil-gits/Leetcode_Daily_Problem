‚úÖ What is a "Balanced Permutation"?
You are trying to split the digits into two halves such that:

The sum of digits in both halves is equal.

The total number of digits in the string is n, and each half is of size n/2 (and (n+1)/2 if odd length).

The final result counts how many such permutations exist where digits are rearranged into two halves with equal digit sums.

üß† Main Concepts Used
freq: Frequency of each digit (0‚Äì9) in the input string.

fact and ifact: Precomputed factorials and inverse factorials to compute combinations efficiently under modulo.

dp[id][take][cs]:

id: Current digit (0 to 9)

take: Number of digits taken for the first half

cs: Current sum of digits for the first half

Used to memoize recursive results and avoid recomputation.

üîÅ count() Function (Recursive DP)
long long count(long long id, long long take, long long cs)
This function recursively tries to assign digits to the first half of the string and ensures:

Only n/2 digits are taken in the first half.

The sum of these digits becomes half the total sum.

At the base case id == 10:

If take == n/2 and 2 * cs == sum ‚Üí valid partition, so return:
fact[n/2] * fact[(n+1)/2]
This counts permutations of both halves.

‚öôÔ∏è Core Loop in count():
for (long long i = 0; i <= min(freq[id], n / 2 - take); i++)
Tries assigning i digits of current digit id to the first half.

Remaining freq[id] - i go to the second half.

Uses combinations and factorial math to count valid arrangements:
ifact[i] * ifact[freq[id] - i]
Then recursively computes for the next digit.

üîê Edge Case
if (sum % 2) return 0;
If the total sum is odd, it's impossible to split into two equal halves ‚Äî early return 0.

üßÆ Time and Space Complexity
Time Complexity: O(10 * n * sum) ‚âà O(n * sum) for moderate input.

Space Complexity: Same as DP table size.

‚úÖ Final Verdict
‚úîÔ∏è Excellent use of combinatorics and dynamic programming
‚úîÔ∏è Correct modular arithmetic with Fermat‚Äôs little theorem
‚úîÔ∏è Handles corner cases well
class Solution {
public:
    const long long mod = 1e9 + 7;
    vector<long long> freq, fact, ifact;
    long long n, sum;
    vector<vector<vector<long long>>> dp;

    long long binpow(long long a, long long b, long long m) {
        a %= m;
        long long res = 1;
        while (b > 0) {
            if (b & 1)
                res = res * a % m;
            a = a * a % m;
            b >>= 1;
        }
        return res;
    }

    long long count(long long id, long long take, long long cs) {
        if (id == 10) {
            if (take == n / 2 && 2 * cs == sum) {
                return (1LL * fact[n / 2] % mod * fact[(n + 1) / 2] % mod) % mod;
            } else {
                return 0;
            }
        }
        if (dp[id][take][cs] != -1) {
            return dp[id][take][cs];
        }
        long long ways = 0;
        for (long long i = 0; i <= min(freq[id], n / 2 - take); i++) {
            ways = (ways%mod + (1LL * ifact[i] % mod * ifact[freq[id] - i] % mod) % mod * count(id + 1, take + i, cs + i * id) % mod) % mod;
        }
        return dp[id][take][cs] = ways;
    }

    int countBalancedPermutations(string num) {
        n = num.size();
        sum = 0;
        freq.resize(10, 0);
        fact.resize(n + 1, 1);
        ifact.resize(n + 1);

        for (long long i = 0; i < n; i++) {
            freq[num[i] - '0']++;
            sum += (num[i] - '0');
        }

        if (sum % 2) {
            return 0;
        }

        for (long long i = 1; i <= n; i++) {
            fact[i] = (1LL * fact[i - 1] * i) % mod;
        }

        for (long long i = 0; i <= n; i++) {
            ifact[i] = binpow(fact[i], mod - 2, mod) % mod;
        }

        dp.resize(10, vector<vector<long long>>(n + 1, vector<long long>(sum + 1, -1)));
        return count(0, 0, 0) % mod;
    }
};
