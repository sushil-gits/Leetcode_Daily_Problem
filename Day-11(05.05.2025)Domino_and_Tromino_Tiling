🧩 Problem Statement:
You are given an integer n, representing the width of a 2×n board. You need to return the number of ways to completely cover the board using:

Dominoes (1×2 or 2×1)

Trominoes (L-shaped)

Which cover three squares in an L shape: two in one row and one in the adjacent row, or vice versa.

Return the result modulo 10⁹ + 7.

✅ Goal:
Return the number of possible ways to tile a 2×n board using 1×2 dominoes and L-shaped trominoes.

🪜 Stepwise Approach:
Step 1: Understand Base Cases
For small values of n, hardcode the answers since they can’t be derived from smaller ones easily:
if (n <= 1) return 1;
if (n == 2) return 2;
if (n == 3) return 5;
n	Tiling Ways
0	1 (empty board)
1	1 (`
2	2 (`
3	5 (combination of dominos + 2 trominoes)

Step 2: Initialize DP Array
We use dynamic programming to store the number of tiling ways for each width i up to n.
vector<int> dp(n + 1, 0);
dp[0] = 1;
dp[1] = 1;
dp[2] = 2;
dp[3] = 5;
Step 3: Use Recurrence Relation
For i >= 4, use the recurrence relation:
dp[i] = 2 * dp[i - 1] + dp[i - 3];
📌 Why this formula works?

2 * dp[i-1]: Accounts for:

Adding a vertical domino at the end of all dp[i-1] arrangements.

Adding an L-shaped tromino in two orientations.

+ dp[i-3]: Accounts for cases where a tromino covers the last 3 columns in a special way.

🛠️ Modular Arithmetic is used to avoid integer overflows:
dp[i] = (2LL * dp[i - 1] + dp[i - 3]) % mod;
Step 4: Return the Final Answer
return dp[n];
✅ Final Optimized and Corrected Code
int numTilings(int n) {
    if (n <= 1) return 1;
    if (n == 2) return 2;
    if (n == 3) return 5;

    int mod = 1e9 + 7;
    vector<long long> dp(n + 1, 0);
    dp[0] = 1, dp[1] = 1, dp[2] = 2, dp[3] = 5;

    for (int i = 4; i <= n; i++) 
        dp[i] = (2LL * dp[i - 1] + dp[i - 3]) % mod;

    return dp[n];
}
