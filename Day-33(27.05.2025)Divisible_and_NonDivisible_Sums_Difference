Problem Statement:
Title: Difference Between Sums of Divisible and Non-Divisible Numbers

Description:
Given two integers n and m, compute the difference between the sum of all integers from 1 to n (inclusive) that are not divisible by m and the sum of all integers from 1 to n (inclusive) that are divisible by m.

Formally:
Return (sum of numbers not divisible by m) - (sum of numbers divisible by m).

Examples:

Input: n = 10, m = 3
Output: 19
Explanation:

Numbers divisible by 3 in [1,10]: 3, 6, 9 → Sum = 3 + 6 + 9 = 18

Numbers not divisible by 3: 1, 2, 4, 5, 7, 8, 10 → Sum = 1 + 2 + 4 + 5 + 7 + 8 + 10 = 37

Difference = 37 - 18 = 19

Input: n = 5, m = 6
Output: 15
Explanation:

Numbers divisible by 6 in [1,5]: None → Sum = 0

Numbers not divisible by 6: 1, 2, 3, 4, 5 → Sum = 15

Difference = 15 - 0 = 15

Constraints:

1 <= n <= 1000

1 <= m <= 1000

Stepwise Approach:
Initialize two sums:

num1 to accumulate the sum of numbers not divisible by m.

num2 to accumulate the sum of numbers divisible by m.

Iterate through numbers from 1 to n:

For each number i in [1, n], check if it is divisible by m.

If divisible (i % m == 0), add i to num2.

Else, add i to num1.

Compute the result:

Return the difference num1 - num2.

Solution Code:
cpp
class Solution {
public:
    int differenceOfSums(int n, int m) {
        int num1 = 0, num2 = 0;
        for (int i = 1; i <= n; i++) {
            if (i % m == 0)
                num2 += i;
            else
                num1 += i;
        }
        return num1 - num2;
    }
};
Explanation:
The code loops through each number from 1 to n, categorizing them into two groups based on divisibility by m.

It accumulates their sums separately and returns the difference between the two sums.

This approach efficiently computes the result in O(n) time with O(1) space complexity, making it optimal for the constraints.


class Solution {
public:
    int differenceOfSums(int n, int m) {
        int num1=0,num2=0;
        for(int i=1;i<=n;i++)
        {
            if(i%m==0)
            num2+=i;
            else
            num1+=i;
        }
        return num1-num2;
    }
};
